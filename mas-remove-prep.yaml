---
- name: Cleanup AWS and OpenShift configurations
  hosts: localhost
  gather_facts: no
  vars:
    aws_region: "us-east-1"
    efs_sc_name: "efs-sc"
    efs_file_system_name: "efs-token-1" 
    cluster_name: "three-m-test-hcp"
    mas_config_dir: $PWD/artefacts/mas_installation_dir
    cluster_exists: true
  tasks:

    - name: Get cluster username
      when: cluster_exists
      ansible.builtin.command: >
        oc whoami
      register: username

    - name: Get cluster API Token
      when: cluster_exists
      ansible.builtin.command: >
        oc whoami --show-token
      register: api_key

    - name: Get cluster API Server
      when: cluster_exists
      ansible.builtin.command: >
        oc whoami --show-server
      register: api_server

    - name: Extract relevant values from secret and set as fact
      ansible.builtin.set_fact:      
        efs_policy_name: "{{ (cluster_name ~ '-rosa-efs-csi') }}"
        efs_role_name: "{{ (cluster_name ~ '-aws-efs-csi-operator') }}"

    - name: Remove MAS files - License and Env
      ansible.builtin.file:
        path: "artefacts/{{ item }}"
        state: absent
      with_items:
        - setenv-install.sh
        - license.dat
    
    - name: Delete a directory and its contents
      ansible.builtin.file:
        path: "{{ mas_config_dir }}" 
        state: absent
    
    - name: Delete existing Storage Class if it exists
      when: cluster_exists
      kubernetes.core.k8s:
        state: absent
        api_key: "{{ api_key.stdout }}"
        username: "{{ username.stdout }}"
        host: "{{ api_server.stdout }}"
        validate_certs: false
        api_version: storage.k8s.io/v1
        kind: StorageClass
        name: "{{ efs_sc_name }}"


    - name: Delete EFS File System (Only If Not Exists)
      community.aws.efs:
        region: "{{ aws_region }}"
        name: "{{ efs_file_system_name }}"
        state: absent

    - name: Check if Security Group exists
      amazon.aws.ec2_security_group_info:
        region: "{{ aws_region }}"
        filters:
          group_name: "{{ cluster_name }}-efs-sg"
      register: existing_sg

    - name: Delete Security Group rules if it exists
      when: existing_sg.security_groups[0] is defined
      amazon.aws.ec2_security_group:
        region: "{{ aws_region }}"
        group_id: "{{ existing_sg.security_groups[0].group_id }}"
        state: absent

    - name: Delete ClusterCSIDriver Object for EFS Operator
      when: cluster_exists
      kubernetes.core.k8s:
        state: absent
        api_key: "{{ api_key.stdout }}"
        username: "{{ username.stdout }}"
        host: "{{ api_server.stdout }}"
        validate_certs: false
        api_version: operator.openshift.io/v1
        kind: ClusterCSIDriver
        name: efs.csi.aws.com

    - name: Create Subscription for EFS Operator
      when: cluster_exists
      kubernetes.core.k8s:
        state: absent
        api_key: "{{ api_key.stdout }}"
        username: "{{ username.stdout }}"
        host: "{{ api_server.stdout }}"
        validate_certs: false
        api_version: operators.coreos.com/v1alpha1
        kind: Subscription
        name: aws-efs-csi-driver-operator-subscription
        namespace: openshift-operators

    - name: Create Operator Group for EFS Operator
      when: cluster_exists
      kubernetes.core.k8s:
        state: absent
        api_key: "{{ api_key.stdout }}"
        username: "{{ username.stdout }}"
        host: "{{ api_server.stdout }}"
        validate_certs: false
        api_version: operators.coreos.com/v1
        kind: OperatorGroup
        name: openshift-cluster-csi-drivers-operatorgroup
        namespace: openshift-cluster-csi-drivers

    - name: Create Secret for EFS Operator
      when: cluster_exists
      kubernetes.core.k8s:
        state: absent
        api_key: "{{ api_key.stdout }}"
        username: "{{ username.stdout }}"
        host: "{{ api_server.stdout }}"
        validate_certs: false
        api_version: v1
        kind: Secret
        name: aws-efs-cloud-credentials
        namespace: openshift-cluster-csi-drivers

    - name: Delete for EFS CSI Driver
      amazon.aws.iam_role:
        name: "{{ efs_role_name }}"
        state: absent

    - name: Delete EFS IAM Policy
      amazon.aws.iam_managed_policy:
        policy_name: "{{ efs_policy_name }}"
        state: absent

    - name: Create or Update EFS IAM Policy
      amazon.aws.iam_managed_policy:
        policy_name: "{{ efs_policy_name }}"
        state: absent
