---
- name: Create AWS Secret Manager and grant access
  hosts: localhost
  gather_facts: no
  vars:
    aws_region: "us-east-1"
    aws_secret_region: "us-east-1"
    cluster_name: "four-test-test-hcp"
    efs_sc_name: "efs-sc"
    efs_file_system_name: "efs-token-1" 
    filesystem_id: "" 
    mas_license_path: artefacts/license.dat
    mas_instance_id: mas1
    mas_config_dir: artefacts
    mas_dro_email: myemail@mail.com
    mas_dro_firstname: FirstName
    mas_dro_lastname: LastName
    mas_prometheus_alert_storageclass: gp2-csi
    provision_efs: true
    catalog_version: v9-250306-amd64 # Default Value - "@@MAS_LATEST_CATALOG@@" - Installs latest catalog version, v9-250306-amd64|v9-250206-amd64|v9-250109-amd64

  tasks:  
    - name: Lookup IBM MAS Secrets from Secrets Manager
      ansible.builtin.set_fact:
        secret_value: "{{ lookup('amazon.aws.aws_secret', 'mas/secrets', bypath=true, region=aws_secret_region) }}"

    - name: Set Fact to clean up values
      ansible.builtin.set_fact: 
        new_secret_value: "{{ secret_value['mas/secrets'] }}"

    - name: Extract relevant values from secret and set as fact
      ansible.builtin.set_fact:      
        mas_entitlement: "{{ new_secret_value['entitlement_key'] }}"
        mas_sls_license_id: "{{ new_secret_value['sls_license_id'] }}"
        mas_sls_license: "{{ new_secret_value['sls_license_key'] | b64decode }}"
        efs_policy_name: "{{ (cluster_name ~ '-rosa-efs-csi') if (provision_efs | default(false) | bool) else omit }}"
        efs_role_name: "{{ (cluster_name ~ '-aws-efs-csi-operator') if (provision_efs | default(false) | bool) else omit }}"

    - name: Save MAS License from Key Vault to file using copy
      ansible.builtin.copy:
        content: "{{ mas_sls_license }}"
        dest: "{{ mas_license_path }}"
        mode: '0644'

    - name: Get AWS Account ID
      when: provision_efs
      amazon.aws.aws_caller_info:
      register: aws_account_id
      changed_when: false
    
    - name: Set AWS Account ID fact
      set_fact:
        aws_account_id: "{{ aws_account_id.account }}"
      when: provision_efs

    - name: Get OIDC Provider using Ansible native module
      when: provision_efs
      kubernetes.core.k8s_info:
        api_version: config.openshift.io/v1
        kind: Authentication
        name: cluster
      register: oidc_provider_info
    
    - name: Extract OIDC Provider
      ansible.builtin.set_fact:
        oidc_provider: "{{ oidc_provider_info.resources[0].spec.serviceAccountIssuer | regex_replace('^https://', '') }}"
      when: provision_efs
      
    - name: Define EFS IAM Policy
      when: provision_efs
      ansible.builtin.set_fact:
        efs_iam_policy:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "elasticfilesystem:DescribeAccessPoints"
                - "elasticfilesystem:DescribeFileSystems"
                - "elasticfilesystem:DescribeMountTargets"
                - "elasticfilesystem:TagResource"
                - "ec2:DescribeAvailabilityZones"
              Resource: "*"
            - Effect: "Allow"
              Action: "elasticfilesystem:CreateAccessPoint"
              Resource: "*"
              Condition:
                StringLike:
                  "aws:RequestTag/efs.csi.aws.com/cluster": "true"
            - Effect: "Allow"
              Action: "elasticfilesystem:DeleteAccessPoint"
              Resource: "*"
              Condition:
                StringEquals:
                  "aws:ResourceTag/efs.csi.aws.com/cluster": "true"

    - name: Define IAM Trust Policy
      when: provision_efs
      ansible.builtin.set_fact:
        efs_trust_policy:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "arn:aws:iam::{{ aws_account_id }}:oidc-provider/{{ oidc_provider }}"
              Action: "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "{{ oidc_provider.stdout }}:sub":
                    - "system:serviceaccount:openshift-cluster-csi-drivers:aws-efs-csi-driver-operator"
                    - "system:serviceaccount:openshift-cluster-csi-drivers:aws-efs-csi-driver-controller-sa"
    
    - name: Create or Update EFS IAM Policy
      when: provision_efs
      amazon.aws.iam_managed_policy:
        policy_name: "{{ efs_policy_name }}"
        policy: "{{ efs_iam_policy | to_json }}"
        policy_description: "IAM Policy for EFS"
        state: present
      register: efs_policy_result
    
    - name: Extract existing policy ARN
      when: provision_efs
      ansible.builtin.set_fact:
        efs_policy_arn: >-
          {{ efs_policy_result.policy.arn }}

    - name: Create IAM Role for EFS CSI Driver
      amazon.aws.iam_role:
        name: "{{ efs_role_name }}"
        state: present
        assume_role_policy_document: "{{ efs_trust_policy }}"
        description: "IAM Role for EFS"
        managed_policies:
          - "{{ efs_policy_arn }}"
      register: iam_role_result
    
    - name: Get cluster username
      ansible.builtin.command: >
        oc whoami
      register: username

    - name: Get cluster API Token
      ansible.builtin.command: >
        oc whoami --show-token
      register: api_key

    - name: Get cluster API Server
      ansible.builtin.command: >
        oc whoami --show-server
      register: api_server

    - debug:
        msg: "{{ iam_role_result.iam_role.arn }}"

    - name: Create Secret for EFS Operator
      when: provision_efs
      kubernetes.core.k8s:
        state: present
        api_key: "{{ api_key.stdout }}"
        username: "{{ username.stdout }}"
        host: "{{ api_server.stdout }}"
        validate_certs: false
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: aws-efs-cloud-credentials
            namespace: openshift-cluster-csi-drivers
          stringData:
            credentials: |-
              [default]
              role_arn = "{{ iam_role_result.iam_role.arn }}"
              web_identity_token_file = /var/run/secrets/openshift/serviceaccount/token
    
    - name: Create Operator Group for EFS Operator
      when: provision_efs
      kubernetes.core.k8s:
        state: present
        api_key: "{{ api_key.stdout }}"
        username: "{{ username.stdout }}"
        host: "{{ api_server.stdout }}"
        validate_certs: false
        definition:
          apiVersion: operators.coreos.com/v1
          kind: OperatorGroup
          metadata:
            generateName: openshift-cluster-csi-drivers-
            namespace: openshift-cluster-csi-drivers

    - name: Create Subscription for EFS Operator
      when: provision_efs
      kubernetes.core.k8s:
        state: present
        api_key: "{{ api_key.stdout }}"
        username: "{{ username.stdout }}"
        host: "{{ api_server.stdout }}"
        validate_certs: false
        definition:
          apiVersion: operators.coreos.com/v1alpha1
          kind: Subscription
          metadata:
            labels:
              operators.coreos.com/aws-efs-csi-driver-operator.openshift-cluster-csi-drivers: ""
            name: aws-efs-csi-driver-operator
            namespace: openshift-cluster-csi-drivers
          spec:
            channel: stable
            installPlanApproval: Automatic
            name: aws-efs-csi-driver-operator
            source: redhat-operators
            sourceNamespace: openshift-marketplace

    - name: Read Default OpenShift Ingress Secret
      kubernetes.core.k8s_info:
        kind: Secret
        api_key: "{{ api_key.stdout }}"
        username: "{{ username.stdout }}"
        host: "{{ api_server.stdout }}"
        validate_certs: false
        namespace: openshift-ingress
      register: ingress_secrets

    - name: Find secret that ends with 'ingress'
      ansible.builtin.set_fact:
        ingress_secret: "{{ ingress_secrets.resources | json_query('[?ends_with(metadata.name, `bundle-secret`)]') }}"
    
    - name: Wait for aws-efs-csi-driver-operator deployment to be ready
      when: provision_efs
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: aws-efs-csi-driver-operator
        namespace: openshift-cluster-csi-drivers
      register: deployment_status
      retries: 60
      delay: 10
      until: >
        deployment_status.resources | length > 0 and
        deployment_status.resources[0].status.availableReplicas is defined and
        deployment_status.resources[0].status.availableReplicas > 0

    - name: Create Secret for EFS Operator
      when: provision_efs
      kubernetes.core.k8s:
        state: present
        api_key: "{{ api_key.stdout }}"
        username: "{{ username.stdout }}"
        host: "{{ api_server.stdout }}"
        validate_certs: false
        definition:
          apiVersion: operator.openshift.io/v1
          kind: ClusterCSIDriver
          metadata:
              name: efs.csi.aws.com
          spec:
            managementState: Managed

    - name: Wait for aws-efs-csi-driver-node DaemonSet to be ready
      when: provision_efs
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: DaemonSet
        name: aws-efs-csi-driver-node
        namespace: openshift-cluster-csi-drivers
      register: daemonset_status
      retries: 60
      delay: 10
      until: >
        daemonset_status.resources | length > 0 and
        daemonset_status.resources[0].status.numberAvailable is defined and
        daemonset_status.resources[0].status.numberAvailable > 0

    - name: Get first worker node name
      when: provision_efs
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Node
        label_selectors:
          - "node-role.kubernetes.io/worker"
      register: worker_nodes

    - name: Set worker node name as fact
      when: worker_nodes.resources is defined and worker_nodes.resources | length > 0 and (provision_efs | default(false) | bool)
      ansible.builtin.set_fact:
        worker_node: "{{ worker_nodes.resources[0].metadata.name }}"

    - name: Get VPC ID of the Worker Node
      when: provision_efs
      amazon.aws.ec2_instance_info:
        filters:
          private-dns-name: "{{ worker_node }}"
        region: "{{ aws_region }}"
      register: ec2_instance_info
    
    - name: Set VPC ID as a Fact
      ansible.builtin.set_fact:
        vpc_id: "{{ ec2_instance_info.instances[0].vpc_id }}"
    
    - name: Debug VPC ID (Optional)
      debug:
        msg: "VPC ID: {{ vpc_id }}"

    - name: Get VPC CIDR
      when: provision_efs
      amazon.aws.ec2_vpc_net_info:
        region: "{{ aws_region }}"
        filters:
          vpc-id: "{{ vpc_id }}"
      register: vpc_info
    
    - name: Set VPC CIDR as a Fact
      ansible.builtin.set_fact:
        vpc_cidr: "{{ vpc_info.vpcs[0].cidr_block }}"
    
    - name: Debug VPC CIDR (Optional)
      debug:
        msg: "VPC CIDR: {{ vpc_cidr }}"

    - name: Get Security Group ID from Worker Node
      amazon.aws.ec2_instance_info:
        region: "{{ aws_region }}"
        filters:
          private-dns-name: "{{ worker_node }}"
      register: instance_info
    
    - name: Extract Security Group ID
      ansible.builtin.set_fact:
        security_group_id: "{{ instance_info.instances[0].security_groups[0].group_id }}"
    
    - name: Get Security Group Name from ID
      amazon.aws.ec2_security_group_info:
        region: "{{ aws_region }}"
        filters:
          group-id: "{{ security_group_id }}"
      register: security_group_info

    - name: Extract Security Group Name
      ansible.builtin.set_fact:
        security_group_name: "{{ security_group_info.security_groups[0].group_name }}"
    
    - name: Debug Security Group Name
      ansible.builtin.debug:
        msg: "Security Group Name: {{ security_group_name }}"
    
    - name: Update Security Group to Allow EFS
      amazon.aws.ec2_security_group:
        region: "{{ aws_region }}"
        name: "{{ security_group_name }}"
        description: "AWS EFS SG"
        group_id: "{{ security_group_id }}"
        vpc_id: "{{ vpc_id }}"
        rules:
          - proto: tcp
            from_port: 0
            to_port: 2049
            cidr_ip: "{{ vpc_cidr }}"
            rule_desc: "Allow EFS access from VPC"
        state: present

    - name: Get Subnets in the VPC
      amazon.aws.ec2_vpc_subnet_info:
        region: "{{ aws_region }}"
        filters:
          vpc-id: "{{ vpc_id }}"
      register: subnet_info
   
    - name: Filter Subnets with 'private' in Name Tag
      ansible.builtin.set_fact:
        private_subnets: "{{ subnet_info.subnets | selectattr('tags.Name', 'search', 'private') | map(attribute='subnet_id') | list }}"
    
    - name: Debug Matching Private Subnet IDs
      ansible.builtin.debug:
        msg: "{{ private_subnets }}"

    - name: Check if EFS File System Exists
      community.aws.efs_info:
        region: "{{ aws_region }}"
        name: "{{ efs_file_system_name  }}"
      register: existing_efs
    
    - name: Create EFS File System (Only If Not Exists)
      community.aws.efs:
        region: "{{ aws_region }}"
        name: "{{ efs_file_system_name }}"
        encrypt: True
        state: present
        tags:
           Name: "{{ efs_file_system_name }}"
      when: existing_efs.efs | length == 0
      register: created_efs
    
    - name: Set EFS File System ID
      ansible.builtin.set_fact:
        efs_id: >-
          {{ created_efs.efs.file_system_id if created_efs.changed else existing_efs.efs[0].file_system_id }}
    
    - name: Debug EFS File System ID
      ansible.builtin.debug:
        msg: "EFS File System ID: {{ efs_id }}"

    - name: Get Existing EFS Mount Targets
      ansible.builtin.shell: >
        aws efs describe-mount-targets --file-system-id {{ efs_id }} --region {{ aws_region }}
      register: existing_mounts
      changed_when: false
    
    - name: Extract Existing Mount Target Subnet IDs
      ansible.builtin.set_fact:
        existing_mount_subnets: "{{ existing_mounts.stdout | from_json | json_query('MountTargets[*].SubnetId') }}"

    - debug:
        msg: "{{ private_subnets}}"
    
    - name: Create EFS Mount Targets if they don't exist
      community.aws.efs:
        region: "{{ aws_region }}"
        name: "{{ efs_file_system_name }}"
        state: present
        tags:
           Name: "{{ efs_file_system_name }}"
        targets:
          - subnet_id: "{{ private_subnets[0] }}"
            security_groups: ["{{ security_group_id }}"]
          - subnet_id: "{{ private_subnets[1] }}"
            security_groups: ["{{ security_group_id }}"]
          - subnet_id: "{{ private_subnets[2] }}"
            security_groups: ["{{ security_group_id }}"]
      when: provision_efs
      register: mount_targets
    
    - name: Check if Storage Class exists
      kubernetes.core.k8s_info:
        api_key: "{{ api_key.stdout }}"
        username: "{{ username.stdout }}"
        host: "{{ api_server.stdout }}"
        validate_certs: false
        api_version: storage.k8s.io/v1
        kind: StorageClass
        name: "{{ efs_sc_name }}"
      register: existing_sc

    - name: Delete existing Storage Class
      when: existing_sc.resources | length > 0
      kubernetes.core.k8s:
        state: absent
        api_key: "{{ api_key.stdout }}"
        username: "{{ username.stdout }}"
        host: "{{ api_server.stdout }}"
        validate_certs: false
        api_version: storage.k8s.io/v1
        kind: StorageClass
        name: "{{ efs_sc_name }}"

    - name: Create Storage Class backed by EFS
      kubernetes.core.k8s:
        state: present
        api_key: "{{ api_key.stdout }}"
        username: "{{ username.stdout }}"
        host: "{{ api_server.stdout }}"
        validate_certs: false
        definition:
          kind: StorageClass
          apiVersion: storage.k8s.io/v1
          metadata:
            name: "{{ efs_sc_name }}"
          provisioner: efs.csi.aws.com
          parameters:
            provisioningMode: efs-ap
            fileSystemId: "{{ efs_id if provision_efs | default(false) | bool else filesystem_id }}"
            directoryPerms: "700"
            gidRangeStart: "1000"
            gidRangeEnd: "2000"
            basePath: "/dynamic_provisioning"

    - name: Generate MAS installation environmental variable from template
      ansible.builtin.template:
        src: artefacts/setenv-install.j2
        dest: artefacts/setenv-install.sh




